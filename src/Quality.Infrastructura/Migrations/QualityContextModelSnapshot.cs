// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quality.Infrastructura.EF;

namespace Quality.Infrastructura.Migrations
{
    [DbContext(typeof(QualityContext))]
    partial class QualityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Quality.Domain.Entities.Producciones.Inventario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Adquisicion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalAnual")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Inventarios");
                });

            modelBuilder.Entity("Quality.Domain.Entities.Producciones.Producto", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompraId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<string>("InventarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StockId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VentaId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompraId");

                    b.HasIndex("InventarioId");

                    b.HasIndex("StockId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("Quality.Domain.Entities.Producciones.Stock", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaInical")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Quality.Domain.Entities.Usuarios.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identificacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rol")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Quality.Domain.Entities.Ventas.Compra", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FacturaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrdenDeCompraId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResiboDeCajaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TotalProductos")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacturaId");

                    b.HasIndex("OrdenDeCompraId");

                    b.HasIndex("ResiboDeCajaId");

                    b.ToTable("Compras");
                });

            modelBuilder.Entity("Quality.Domain.Entities.Ventas.Factura", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("TotalAPagar")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Facturas");
                });

            modelBuilder.Entity("Quality.Domain.Entities.Ventas.OrdenDeCompra", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lugar")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrdenDeCompras");
                });

            modelBuilder.Entity("Quality.Domain.Entities.Ventas.ResiboDeCaja", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConceptoDe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResividoDe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SumadoDe")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResiboDeCajas");
                });

            modelBuilder.Entity("Quality.Domain.Entities.Producciones.Producto", b =>
                {
                    b.HasOne("Quality.Domain.Entities.Ventas.Compra", "Compra")
                        .WithMany("Productos")
                        .HasForeignKey("CompraId");

                    b.HasOne("Quality.Domain.Entities.Producciones.Inventario", "Inventario")
                        .WithMany("Productos")
                        .HasForeignKey("InventarioId");

                    b.HasOne("Quality.Domain.Entities.Producciones.Stock", "Stock")
                        .WithMany("Productos")
                        .HasForeignKey("StockId");

                    b.HasOne("Quality.Domain.Entities.Usuarios.Usuario", "Usuario")
                        .WithMany("Productos")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Compra");

                    b.Navigation("Inventario");

                    b.Navigation("Stock");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Quality.Domain.Entities.Ventas.Compra", b =>
                {
                    b.HasOne("Quality.Domain.Entities.Ventas.Factura", "Factura")
                        .WithMany("Compras")
                        .HasForeignKey("FacturaId");

                    b.HasOne("Quality.Domain.Entities.Ventas.OrdenDeCompra", "OrdenDeCompra")
                        .WithMany("Compras")
                        .HasForeignKey("OrdenDeCompraId");

                    b.HasOne("Quality.Domain.Entities.Ventas.ResiboDeCaja", "ResiboDeCaja")
                        .WithMany("Compras")
                        .HasForeignKey("ResiboDeCajaId");

                    b.Navigation("Factura");

                    b.Navigation("OrdenDeCompra");

                    b.Navigation("ResiboDeCaja");
                });

            modelBuilder.Entity("Quality.Domain.Entities.Producciones.Inventario", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Quality.Domain.Entities.Producciones.Stock", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Quality.Domain.Entities.Usuarios.Usuario", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Quality.Domain.Entities.Ventas.Compra", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Quality.Domain.Entities.Ventas.Factura", b =>
                {
                    b.Navigation("Compras");
                });

            modelBuilder.Entity("Quality.Domain.Entities.Ventas.OrdenDeCompra", b =>
                {
                    b.Navigation("Compras");
                });

            modelBuilder.Entity("Quality.Domain.Entities.Ventas.ResiboDeCaja", b =>
                {
                    b.Navigation("Compras");
                });
#pragma warning restore 612, 618
        }
    }
}
